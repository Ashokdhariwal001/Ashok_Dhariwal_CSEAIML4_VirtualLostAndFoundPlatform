<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Virtual Lost & Found</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        body { font-family: 'Poppins', sans-serif; }
        .loader { border-top-color: #3498db; animation: spinner 1.5s linear infinite; }
        @keyframes spinner { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Toast Notification -->
    <div id="toast" class="fixed top-4 right-4 z-50 hidden">
        <div class="bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg"></div>
    </div>

    <!-- Header -->
    <header class="bg-blue-600 text-white p-4 shadow-lg">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-2xl font-bold">Lost & Found</h1>
            <div id="authButtons">
                <button onclick="showAuthModal('login')" class="bg-white text-blue-600 px-4 py-2 rounded-lg">Login</button>
                <button onclick="showAuthModal('register')" class="bg-transparent border border-white px-4 py-2 rounded-lg ml-2">Register</button>
            </div>
            <div id="userInfo" class="hidden">
                <span id="userName" class="mr-2"></span>
                <button onclick="logout()" class="bg-red-500 px-4 py-2 rounded-lg">Logout</button>
            </div>
        </div>
    </header>

    <!-- Main Navigation -->
    <nav class="bg-white shadow-md">
        <div class="container mx-auto">
            <ul class="flex">
                <li class="flex-1"><button onclick="switchTab('home')" class="w-full py-4 text-center hover:bg-gray-100 font-medium">Home</button></li>
                <li class="flex-1"><button onclick="switchTab('post')" class="w-full py-4 text-center hover:bg-gray-100 font-medium">Post Item</button></li>
                <li class="flex-1"><button onclick="switchTab('search')" class="w-full py-4 text-center hover:bg-gray-100 font-medium">Search</button></li>
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container mx-auto p-4">
        <!-- Home Tab -->
        <section id="homeTab" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <!-- Items will be dynamically added here -->
        </section>

        <!-- Post Item Tab -->
        <section id="postTab" class="hidden max-w-2xl mx-auto">
            <form id="itemForm" class="bg-white p-6 rounded-lg shadow-md">
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Item Type</label>
                    <select name="type" class="w-full p-2 border rounded" required>
                        <option value="lost">Lost Item</option>
                        <option value="found">Found Item</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Item Name</label>
                    <input type="text" name="name" class="w-full p-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Category</label>
                    <select name="category" class="w-full p-2 border rounded" required>
                        <option value="electronics">Electronics</option>
                        <option value="clothing">Clothing</option>
                        <option value="documents">Documents</option>
                        <option value="pets">Pets</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Description</label>
                    <textarea name="description" class="w-full p-2 border rounded" rows="3" required></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Location</label>
                    <input type="text" name="location" class="w-full p-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Image (Optional)</label>
                    <input type="file" name="image" accept="image/*" class="w-full p-2 border rounded">
                </div>
                <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">Post Item</button>
            </form>
        </section>

        <!-- Search Tab -->
        <section id="searchTab" class="hidden">
            <div class="max-w-2xl mx-auto mb-6">
                <input type="text" id="searchInput" placeholder="Search items..." class="w-full p-4 border rounded-lg shadow-sm">
                <div class="flex gap-2 mt-4">
                    <button onclick="filterItems('all')" class="flex-1 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">All</button>
                    <button onclick="filterItems('lost')" class="flex-1 py-2 bg-red-600 text-white rounded hover:bg-red-700">Lost</button>
                    <button onclick="filterItems('found')" class="flex-1 py-2 bg-green-600 text-white rounded hover:bg-green-700">Found</button>
                </div>
            </div>
            <div id="searchResults" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <!-- Search results will be displayed here -->
            </div>
        </section>
    </main>

    <!-- Auth Modal -->
    <div id="authModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center">
        <div class="bg-white p-8 rounded-lg max-w-md w-full">
            <h2 id="authTitle" class="text-2xl font-bold mb-4">Login</h2>
            <form id="authForm">
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Email</label>
                    <input type="email" name="email" class="w-full p-2 border rounded" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Password</label>
                    <input type="password" name="password" class="w-full p-2 border rounded" required>
                </div>
                <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">Submit</button>
            </form>
            <button onclick="closeAuthModal()" class="mt-4 text-gray-600 hover:text-gray-800">Close</button>
        </div>
    </div>

    <script>
        let currentUser = JSON.parse(localStorage.getItem('currentUser')) || null;
        let items = JSON.parse(localStorage.getItem('items')) || [];

        // Update UI based on auth state
        function updateAuthUI() {
            const authButtons = document.getElementById('authButtons');
            const userInfo = document.getElementById('userInfo');
            const userName = document.getElementById('userName');

            if (currentUser) {
                authButtons.classList.add('hidden');
                userInfo.classList.remove('hidden');
                userName.textContent = currentUser.email;
            } else {
                authButtons.classList.remove('hidden');
                userInfo.classList.add('hidden');
            }
        }

        // Auth Modal Functions
        function showAuthModal(type) {
            document.getElementById('authModal').classList.remove('hidden');
            document.getElementById('authTitle').textContent = type === 'login' ? 'Login' : 'Register';
            document.getElementById('authForm').dataset.type = type;
        }

        function closeAuthModal() {
            document.getElementById('authModal').classList.add('hidden');
        }

        // Toast Notification
        function showToast(message, success = true) {
            const toast = document.getElementById('toast');
            const toastContent = toast.querySelector('div');
            toastContent.textContent = message;
            toastContent.className = px-6 py-3 rounded-lg shadow-lg ${success ? 'bg-green-500' : 'bg-red-500'} text-white;
            toast.classList.remove('hidden');
            setTimeout(() => toast.classList.add('hidden'), 3000);
        }

        // Tab Navigation
        function switchTab(tab) {
            ['homeTab', 'postTab', 'searchTab'].forEach(t => {
                document.getElementById(t).classList.add('hidden');
            });
            document.getElementById(${tab}Tab).classList.remove('hidden');
            if (tab === 'home') loadItems();
        }

        // Load and Display Items
        function loadItems() {
            const homeTab = document.getElementById('homeTab');
            homeTab.innerHTML = '';
            items.forEach(item => {
                const itemCard = createItemCard(item);
                homeTab.appendChild(itemCard);
            });
        }

        function createItemCard(item) {
            const div = document.createElement('div');
            div.className = 'bg-white p-4 rounded-lg shadow-md';
            div.innerHTML = `
                <div class="h-48 bg-gray-200 rounded-lg mb-4 overflow-hidden">
                    <img src="${item.image || https://source.unsplash.com/random/400x300/?${item.category}}" 
                         alt="${item.name}" 
                         class="w-full h-full object-cover">
                </div>
                <h3 class="font-bold text-lg">${item.name}</h3>
                <p class="text-sm text-gray-600 mb-2">${item.location}</p>
                <span class="inline-block px-2 py-1 rounded ${item.type === 'lost' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}">${item.type}</span>
                <p class="mt-2">${item.description}</p>
                ${currentUser ? <button onclick="contactOwner('${item.userEmail}')" class="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 w-full">Contact</button> : ''}
            `;
            return div;
        }

        // Form Handling
        document.getElementById('itemForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!currentUser) {
                showToast('Please login first', false);
                return;
            }

            const formData = new FormData(e.target);
            const newItem = {
                id: Date.now(),
                type: formData.get('type'),
                name: formData.get('name'),
                category: formData.get('category'),
                description: formData.get('description'),
                location: formData.get('location'),
                userEmail: currentUser.email,
                date: new Date().toISOString()
            };

            const imageFile = formData.get('image');
            if (imageFile.size > 0) {
                try {
                    const uploadData = new FormData();
                    uploadData.append('file', imageFile);
                    uploadData.append('userId', currentUser.email);
                    uploadData.append('appSlug', 'lost-found-123');

                    const response = await fetch('https://r0c8kgwocscg8gsokogwwsw4.zetaverse.one/storage/upload', {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer OpAQCmtSDEdLW9fQyRpPs0BqDyz1'
                        },
                        body: uploadData
                    });

                    const result = await response.json();
                    if (result.success) {
                        newItem.image = result.url;
                    }
                } catch (error) {
                    console.error('Image upload failed:', error);
                }
            }

            items.unshift(newItem);
            localStorage.setItem('items', JSON.stringify(items));
            showToast('Item posted successfully');
            e.target.reset();
            switchTab('home');
        });

        // Auth Form Handling
        document.getElementById('authForm').addEventListener('submit', (e) => {
            e.preventDefault();
            const type = e.target.dataset.type;
            const formData = new FormData(e.target);
            const userData = {
                email: formData.get('email'),
                password: formData.get('password')
            };

            if (type === 'register') {
                localStorage.setItem(user_${userData.email}, JSON.stringify(userData));
                showToast('Registration successful');
            }

            const storedUser = JSON.parse(localStorage.getItem(user_${userData.email}));
            if (storedUser && storedUser.password === userData.password) {
                currentUser = userData;
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
                updateAuthUI();
                closeAuthModal();
                showToast('Login successful');
            } else {
                showToast('Invalid credentials', false);
            }
        });

        // Search and Filter
        document.getElementById('searchInput').addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filteredItems = items.filter(item => 
                item.name.toLowerCase().includes(searchTerm) ||
                item.description.toLowerCase().includes(searchTerm) ||
                item.location.toLowerCase().includes(searchTerm)
            );
            displaySearchResults(filteredItems);
        });

        function filterItems(type) {
            const filteredItems = type === 'all' ? items : items.filter(item => item.type === type);
            displaySearchResults(filteredItems);
        }

        function displaySearchResults(items) {
            const resultsDiv = document.getElementById('searchResults');
            resultsDiv.innerHTML = '';
            items.forEach(item => {
                const itemCard = createItemCard(item);
                resultsDiv.appendChild(itemCard);
            });
        }

        function contactOwner(email) {
            showToast(Contact information sent to: ${email});
        }

        function logout() {
            currentUser = null;
            localStorage.removeItem('currentUser');
            updateAuthUI();
            showToast('Logged out successfully');
        }

        // Initialize
        updateAuthUI();
        switchTab('home');
    </script>
</body>
</html>
